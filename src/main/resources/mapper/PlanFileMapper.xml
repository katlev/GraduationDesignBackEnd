<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.katle.design.dao.PlanFileMapper" >
  <resultMap id="BaseResultMap" type="com.katle.design.entities.PlanFile" >
    <id column="plan_id" property="planId" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="plan_name" property="planName" jdbcType="VARCHAR" />
    <result column="plan_path" property="planPath" jdbcType="VARCHAR" />
    <result column="plan_start" property="planStart" jdbcType="DATE" />
    <result column="plan_end" property="planEnd" jdbcType="DATE" />
    <result column="plan_value" property="planValue" jdbcType="VARCHAR" />
    <result column="actual_value" property="actualValue" jdbcType="VARCHAR" />
    <result column="plan_check" property="planCheck" jdbcType="INTEGER" />
    <result column="plan_opinion" property="planOpinion" jdbcType="VARCHAR" />
    <result column="plan_check_man" property="planCheckMan" jdbcType="BIGINT" />
    <result column="plan_year" property="planYear" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    plan_id, user_id, plan_name, plan_path, plan_start, plan_end, plan_value, actual_value, 
    plan_check, plan_opinion, plan_check_man, plan_year
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.katle.design.entities.PlanFileExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from planfile
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from planfile
    where plan_id = #{planId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from planfile
    where plan_id = #{planId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.katle.design.entities.PlanFileExample" >
    delete from planfile
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.katle.design.entities.PlanFile" >
    insert into planfile (plan_id, user_id, plan_name, 
      plan_path, plan_start, plan_end, 
      plan_value, actual_value, plan_check, 
      plan_opinion, plan_check_man, plan_year
      )
    values (#{planId,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{planName,jdbcType=VARCHAR}, 
      #{planPath,jdbcType=VARCHAR}, #{planStart,jdbcType=DATE}, #{planEnd,jdbcType=DATE}, 
      #{planValue,jdbcType=VARCHAR}, #{actualValue,jdbcType=VARCHAR}, #{planCheck,jdbcType=INTEGER}, 
      #{planOpinion,jdbcType=VARCHAR}, #{planCheckMan,jdbcType=BIGINT}, #{planYear,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.katle.design.entities.PlanFile" >
    insert into planfile
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="planId != null" >
        plan_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="planName != null" >
        plan_name,
      </if>
      <if test="planPath != null" >
        plan_path,
      </if>
      <if test="planStart != null" >
        plan_start,
      </if>
      <if test="planEnd != null" >
        plan_end,
      </if>
      <if test="planValue != null" >
        plan_value,
      </if>
      <if test="actualValue != null" >
        actual_value,
      </if>
      <if test="planCheck != null" >
        plan_check,
      </if>
      <if test="planOpinion != null" >
        plan_opinion,
      </if>
      <if test="planCheckMan != null" >
        plan_check_man,
      </if>
      <if test="planYear != null" >
        plan_year,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="planId != null" >
        #{planId,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="planName != null" >
        #{planName,jdbcType=VARCHAR},
      </if>
      <if test="planPath != null" >
        #{planPath,jdbcType=VARCHAR},
      </if>
      <if test="planStart != null" >
        #{planStart,jdbcType=DATE},
      </if>
      <if test="planEnd != null" >
        #{planEnd,jdbcType=DATE},
      </if>
      <if test="planValue != null" >
        #{planValue,jdbcType=VARCHAR},
      </if>
      <if test="actualValue != null" >
        #{actualValue,jdbcType=VARCHAR},
      </if>
      <if test="planCheck != null" >
        #{planCheck,jdbcType=INTEGER},
      </if>
      <if test="planOpinion != null" >
        #{planOpinion,jdbcType=VARCHAR},
      </if>
      <if test="planCheckMan != null" >
        #{planCheckMan,jdbcType=BIGINT},
      </if>
      <if test="planYear != null" >
        #{planYear,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.katle.design.entities.PlanFileExample" resultType="java.lang.Integer" >
    select count(*) from planfile
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update planfile
    <set >
      <if test="record.planId != null" >
        plan_id = #{record.planId,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.planName != null" >
        plan_name = #{record.planName,jdbcType=VARCHAR},
      </if>
      <if test="record.planPath != null" >
        plan_path = #{record.planPath,jdbcType=VARCHAR},
      </if>
      <if test="record.planStart != null" >
        plan_start = #{record.planStart,jdbcType=DATE},
      </if>
      <if test="record.planEnd != null" >
        plan_end = #{record.planEnd,jdbcType=DATE},
      </if>
      <if test="record.planValue != null" >
        plan_value = #{record.planValue,jdbcType=VARCHAR},
      </if>
      <if test="record.actualValue != null" >
        actual_value = #{record.actualValue,jdbcType=VARCHAR},
      </if>
      <if test="record.planCheck != null" >
        plan_check = #{record.planCheck,jdbcType=INTEGER},
      </if>
      <if test="record.planOpinion != null" >
        plan_opinion = #{record.planOpinion,jdbcType=VARCHAR},
      </if>
      <if test="record.planCheckMan != null" >
        plan_check_man = #{record.planCheckMan,jdbcType=BIGINT},
      </if>
      <if test="record.planYear != null" >
        plan_year = #{record.planYear,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update planfile
    set plan_id = #{record.planId,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      plan_name = #{record.planName,jdbcType=VARCHAR},
      plan_path = #{record.planPath,jdbcType=VARCHAR},
      plan_start = #{record.planStart,jdbcType=DATE},
      plan_end = #{record.planEnd,jdbcType=DATE},
      plan_value = #{record.planValue,jdbcType=VARCHAR},
      actual_value = #{record.actualValue,jdbcType=VARCHAR},
      plan_check = #{record.planCheck,jdbcType=INTEGER},
      plan_opinion = #{record.planOpinion,jdbcType=VARCHAR},
      plan_check_man = #{record.planCheckMan,jdbcType=BIGINT},
      plan_year = #{record.planYear,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.katle.design.entities.PlanFile" >
    update planfile
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="planName != null" >
        plan_name = #{planName,jdbcType=VARCHAR},
      </if>
      <if test="planPath != null" >
        plan_path = #{planPath,jdbcType=VARCHAR},
      </if>
      <if test="planStart != null" >
        plan_start = #{planStart,jdbcType=DATE},
      </if>
      <if test="planEnd != null" >
        plan_end = #{planEnd,jdbcType=DATE},
      </if>
      <if test="planValue != null" >
        plan_value = #{planValue,jdbcType=VARCHAR},
      </if>
      <if test="actualValue != null" >
        actual_value = #{actualValue,jdbcType=VARCHAR},
      </if>
      <if test="planCheck != null" >
        plan_check = #{planCheck,jdbcType=INTEGER},
      </if>
      <if test="planOpinion != null" >
        plan_opinion = #{planOpinion,jdbcType=VARCHAR},
      </if>
      <if test="planCheckMan != null" >
        plan_check_man = #{planCheckMan,jdbcType=BIGINT},
      </if>
      <if test="planYear != null" >
        plan_year = #{planYear,jdbcType=VARCHAR},
      </if>
    </set>
    where plan_id = #{planId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.katle.design.entities.PlanFile" >
    update planfile
    set user_id = #{userId,jdbcType=BIGINT},
      plan_name = #{planName,jdbcType=VARCHAR},
      plan_path = #{planPath,jdbcType=VARCHAR},
      plan_start = #{planStart,jdbcType=DATE},
      plan_end = #{planEnd,jdbcType=DATE},
      plan_value = #{planValue,jdbcType=VARCHAR},
      actual_value = #{actualValue,jdbcType=VARCHAR},
      plan_check = #{planCheck,jdbcType=INTEGER},
      plan_opinion = #{planOpinion,jdbcType=VARCHAR},
      plan_check_man = #{planCheckMan,jdbcType=BIGINT},
      plan_year = #{planYear,jdbcType=VARCHAR}
    where plan_id = #{planId,jdbcType=BIGINT}
  </update>
</mapper>